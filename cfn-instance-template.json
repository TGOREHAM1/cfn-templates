{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "A CFN template for learning",
    "Metadata": {
      "Author": { "Ref": "ParamAuthorName" }
    },
    "Parameters": {
      "ParamAuthorName": {
        "Type": "String",
        "Description": "Owner of the CFN Template."
      },
      "ParamEC2KeyPair": {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the EC2 server."
      },
      "ParamAmiId": {
        "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
        "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      },
      "ParamInstanceType": {
        "Description": "EC2 instance type",
        "Type": "String",
        "Default": "t2.micro",
        "ConstraintDescription": "Please choose a valid instance type.",
        "AllowedValues": [
          "t1.micro",
          "t2.2xlarge",
          "t2.large",
          "t2.medium",
          "t2.micro",
          "t2.nano",
          "t2.small",
          "t2.xlarge",
          "t3.2xlarge",
          "t3.large",
          "t3.medium",
          "t3.micro",
          "t3.nano",
          "t3.small",
          "t3.xlarge",
          "t3a.2xlarge",
          "t3a.large",
          "t3a.medium",
          "t3a.micro",
          "t3a.nano",
          "t3a.small"
        ]
      }
    },
    "Resources": {
      "Instance": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "configSets": {
              "default": ["init", "install", "setuplogs", "setupApp"]
            },
            "init": {
              "commands": {
                "aYumUpdate": {
                  "command": "yum update -y",
                  "cwd": "~"
                },
                "bGrabNode": {
                  "command": "curl -sL https://rpm.nodesource.com/setup_10.x | bash -",
                  "cwd": "~"
                },
                "cMakeAppDir": {
                  "command": "mkdir -p /home/ec2-user/app",
                  "cwd": "~"
                }
              }
            },
            "install": {
              "packages": {
                "yum": {
                  "git": [],
                  "nodejs": [],
                  "awslogs": []
                }
              }
            },
            "setuplogs": {
              "files": {
                "/etc/awslogs/awscli.conf": {
                  "content": {
                    "Fn::Join": ["", [
                      "[default]\n",
                      "region = ", { "Ref": "AWS::Region" }, "\n",
                      "[plugins]\n",
                      "cwlogs = cwlogs\n"
                    ]]
                  },
                  "owner": "root",
                  "group": "root",
                  "mode": "000644"
                },
                "/etc/awslogs/awslogs.conf": {
                  "content": {
                    "Fn::Join": ["", [
                      "[general]\n",
                      "state_file = /var/lib/awslogs/agent-state\n",
                      "\n",
                      "# Global Messages\n",
                      "[/var/log/messages]\n",
                      "file = /var/log/messages\n",
                      { "Fn::Sub": "log_group_name = ${InstanceLogs}\n" },
                      "log_stream_name = /var/log/messages\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "\n",
                      "# CloudFormation Initialization Messages\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      { "Fn::Sub": "log_group_name = ${InstanceLogs}\n" },
                      "log_stream_name = /var/log/cfn-init.log\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "\n",
                      "# Nodejs Messages\n",
                      "[/var/log/nodejs.log]\n",
                      "file = /var/log/nodejs.log\n",
                      { "Fn::Sub": "log_group_name = ${InstanceLogs}\n" },
                      "log_stream_name = /var/log/nodejs.log\n",
                      "datetime_format = %b %d %H:%M:%S\n",
                      "\n",
                      "# Nodejs Error Messages\n",
                      "[/var/log/nodejserr.log]\n",
                      "file = /var/log/nodejserr.log\n",
                      { "Fn::Sub": "log_group_name = ${InstanceLogs}\n" },
                      "log_stream_name = /var/log/nodejserr.log\n",
                      "datetime_format = %b %d %H:%M:%S\n"                    
                    ]]
                  },
                  "owner": "root",
                  "group": "root",
                  "mode": "000644"               
                },
                "/var/log/nodejs.log": {
                  "content": "[Node JS]\n",
                  "owner": "ec2-user",
                  "group": "ec2-user",
                  "mode": "000644"
                },
                "/var/log/nodejserr.log": {
                  "content": "[Node JS]\n",
                  "owner": "ec2-user",
                  "group": "ec2-user",
                  "mode": "000644"
                }               
              },
              "services": {
                "sysvinit": {
                  "awslogsd": {
                    "enabled": true,
                    "ensureRunning": true,
                    "files": [
                      "/etc/awslogs/awscli.conf",
                      "/etc/awslogs/awslogs.conf"
                    ]
                  }
                }
              }
            },
            "setupApp": {
              "commands": {
                "aCloneRepo": {
                  "command": "git clone https://github.com/jcolemorrison/ec2-lb-api.git .",
                  "cwd": "/home/ec2-user/app"
                },
                "bInstallNpm": {
                  "command": "npm install",
                  "cwd": "/home/ec2-user/app"
                },
                "cFirewall": {
                  "command": "iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000",
                  "cwd": "/home/ec2-user/app"
                },
                "dStartServer": {
                  "command": "su ec2-user -c \"node . > /var/log/nodejs.log 2> /var/log/nodejserr.log\"",
                  "cwd": "/home/ec2-user/app"
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId": {
            "Ref": "ParamAmiId"
          },
          "InstanceType": {
            "Ref": "ParamInstanceType"
          },
          "KeyName": {"Ref": "ParamEC2KeyPair"},
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/usr/bin/env bash\n",
                "# Trigger the CFN Init Script\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", { "Ref" : "AWS::StackName" },
                "         --resource Instance ",
                "         --configsets default ",
                "         --region ", { "Ref" : "AWS::Region" }, 
                "\n"
              ]]
            }
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Sub": "${AWS::StackName}-instance"
              }
            },
            {
              "Key": "Owner",
              "Value": { "Ref": "ParamAuthorName" }
            }
          ],
          "SecurityGroupIds": [
            { 
              "Fn::GetAtt": [
                "SecurityGroup",
                "GroupId"
              ]
            }
          ],
          "IamInstanceProfile": { "Ref": "InstanceProfile" }
        }
      },
      "InstanceLogs": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "RetentionInDays": 7
        }
      },
      "InstanceIamLogRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "CreateInstanceLogs",
              "PolicyDocument": {
                "Statement": {
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogGroup"],
                  "Resource": [
                    { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*" }
                  ]
                }
              }
            },
            {
              "PolicyName": "ManageInstanceLogs",
              "PolicyDocument": {
                "Statement": {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "InstanceLogs",
                        "Arn"
                      ] 
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Roles": [
            { "Ref": "InstanceIamLogRole" }
          ]
        }
      }
    },
    "Outputs": {
      "InstanceId": {
        "Description": "ID of the EC2 Instance",
        "Value": {
          "Ref": "Instance"
        }
      },
      "InstancePublicIp": {
        "Description": "Public IPv4 address for the EC2 Instance",
        "Value": {
          "Fn::GetAtt": [
            "Instance",
            "PublicIp"
          ]
        }
      },
      "InstancePublicDns": {
        "Description": "DNS Name for the EC2 Instance",
        "Value": {
          "Fn::GetAtt": [
            "Instance",
            "PublicDnsName"
          ]
        }
      }
    }
  }